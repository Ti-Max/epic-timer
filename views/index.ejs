<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="stylesheets/style.css" />
    <title>Epic timer</title>
    <style>
      /* castom scrollbar */

      /* width */
      ::-webkit-scrollbar {
        width: 8px;
      }

      /* Track */
      ::-webkit-scrollbar-track {
        background: <%= colors.tertiary %>;
      }

      /* Handle */
      ::-webkit-scrollbar-thumb {
        background: <%= colors.secondary %>;
      }

      /* Handle on hover */
      ::-webkit-scrollbar-thumb:hover {
        background: <%= colors.secondaryAlt %>;
      }
      </style>
  </head>

  <body class="h-screen bg-backgroud text-text">
    <div class="grid grid-rows-1 m-auto max-w-6xl p-4 min-h-screen">

      <div class="flex justify-between">
        <div class="text-3xl text-primary">Epic Timer</div>
        <div class="text-center text-primary">
          <%= username %>
          <br>
          <a href="./logout" class="transition-all text-secondary hover:text-text">logout</a>
        </div>
      </div>

      <div class="flex h-[85vh] justify-between items-center ">
        <div></div>
        <div>
          <div class="text-[14rem] leading-[12rem] mb-12" id="timer">0.00</div>
          <div class="flex justify-center items-center">
            <div>
              <div id="ao5" class="text-[4rem] text-secondary pr-2 pb-2 border-r-2 border-tertiary leading-[3rem]">
                <% 
                if(solves[0] !== undefined && solves[0].ao5 > 0)
                {%>
                  <%=solves[0].ao5 %>
                <%}else
                {
                  %>-<%
                }%>
              </div>
              <div class="text-[1rem] text-secondary text-center">ao5</div>
            </div>
            <div>
              <div id="ao12" class="text-[4rem] text-secondary pl-2 pb-2 leading-[3rem]">
                <% 
                if(solves[0] !== undefined && solves[0].ao12 > 0)
                {%>
                  <%=solves[0].ao12 %>
                <%}else
                {
                  %>-<%
                }%>
              </div>
              <div class="text-[1rem] text-secondary text-center">ao12</div>
            </div>
          </div>
        </div>
        <div class="max-h-80 overflow-y-auto pr-3" id="solves">

          <% solves.forEach((solve)=>{ %>

            <div class="flex p-1 pl-2 pr-2 m-1 rounded-md bg-tertiary  justify-between ">
              <div class="text-xs align-text-top text-secondary">#<%= solve.id %></div>
              <div class="text-base ml-1"><%= solve.time %></div>
            </div>

          <% }); %> 

        </div>
      </div>
      
      <div class="flex justify-between">
        <div class="text-secondary">Made by <a href="https://github.com/Ti-Max" class="transition-all text-primary hover:text-text">Ti-Max</a></div>
        <div class="text-secondary"> <a href="https://github.com/Ti-Max/epic-timer" class="transition-all text-primary hover:text-text">v1.0</a></div>
      </div>
  </body>
</html>
<script>
  // Colors
  const textColor = '<%= colors.text %>';

  const timer = document.getElementById("timer");
  const waitMargin = 0.3;

  let time = 0.0;

  // timers
  let timerInterval;
  let readyTimeout;

  let isRunning = false;
  let isWaited = false;
  let isTouched = false;

  document.addEventListener("keydown", (event) => {
    if (event.keyCode !== 32) return;

    if (isRunning) {
      // Stop timer
      clearInterval(timerInterval);
      timer.innerText = formatTime(time, 2);
      isTouched = false;
      isWaited = false;
      timer.style.color = "red";
      
      //Send solve to the database
      if (!event.repeat)
        commitSolve();
    } else if (!isTouched) {
      // Timer touched
      isTouched = true;
      timer.style.color = "red";

      readyTimeout = setTimeout(function () {
        // Timer ready
        timer.innerText = "0.00";
        timer.style.color = "green";
        isWaited = true;
      }, waitMargin * 1000);
    }
  });

  document.addEventListener("keyup", (event) => {
    if (event.keyCode !== 32) return;

    // Check if timer is running
    if (isRunning === false) {
      if (!isWaited) {
        // Waited not long enough!
        clearTimeout(readyTimeout);
        timer.style.color = textColor;
        isTouched = false;
        return;
      }

      // Start timer!
      time = 0;
      timerInterval = setInterval(tick, 10);
      isRunning = true;
      timer.style.color = textColor;
    } else {
      // Timer button released after timer stop
      timer.style.color = textColor;
      isRunning = false;
    }
  });

  function commitSolve(){
    fetch('/commitSolve', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json'
      },
      body: JSON.stringify({
          time: time.toFixed(2),
          category: "overall"
      })
    })
    .then((response) => response.json())
    .then(response => {
      document.getElementById("solves").insertAdjacentHTML("afterbegin", 
      '<div class="flex p-1 pl-2 pr-2 m-1 rounded-md bg-tertiary  justify-between "><div class="text-xs align-text-top text-secondary">#' + (document.getElementById("solves").childElementCount+1) +'</div><div class="text-base ml-1">' + formatTime(time, 2) + '</div></div>'
      );
      document.getElementById("ao5").innerText = response.ao5 !== 0? response.ao5.toFixed(2): "-";
      document.getElementById("ao12").innerText = response.ao12 !== 0? response.ao12.toFixed(2): "-";
    })
    .catch(err => console.log(err));
  }
  function tick() {
    time += 0.01;
    timer.innerText = formatTime(time, 1);
  }

  function formatTime(time, toFixed){
    const hours = Math.floor(time / 3600);
    const minutes = Math.floor((time - hours * 3600) / 60);
    const seconds = time - minutes * 60 - hours * 3600;

    // seconds
    let text = seconds.toFixed(toFixed);

    // minutes
    if (minutes > 0){
      if (seconds < 10){
        text = "0" + text;
      }

      text = minutes + ":" + text;
    }

    // hours
    if (hours > 0){
      if (minutes < 10){
        text = "0" + text;
      }

      text = hours + ":" + text;
    }

    return text;
  }
</script>
